##3create two pod and two service
375  kubectl run frontend --image=nginx
  376  kubectl run backedn --image=nginx
  377  kubectl get pod
  378  kubectl expose pod frontend --port 80
  380  kubectl expose pod backedn --port 80
  381  kubectl get pod,svc
  382  kubectl exec frontend -- curl backedn
  383  kubectl get pod,svc -o wide
  384  kubectl exec frontend -- curl 192.168.145.201
###lets create default deny
vi networkpolicy.yml
####add the content
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: default-deny
  namespace: default
spec:
  podSelector: {}
  policyTypes:
    - Ingress
    - Egress
 ####apply the file 
 kubectl apply -f networkpolicy.yml
 ####test it
 kubectl exec frontend -- curl backedn
 kubectl exec backedn -- curl frontend
###3backedn to frontend policy
vi frontend.yml
#####enable the policy
apiVersion: networking.k8s.io/v1

kind: NetworkPolicy

metadata:

  name: frontend

  namespace: default

spec:

  podSelector:

    matchLabels:

      run: frontend

  policyTypes:

    

  - Egress

  egress:

    - to:

        
        - podSelector:

            matchLabels:

              run: backedn
####apply the policy
kubectl apply -f frontend.yml
###create the backend policy
vi backend.yml
#####put this policy
apiVersion: networking.k8s.io/v1

kind: NetworkPolicy

metadata:

  name: backend

  namespace: default

spec:

  podSelector:

    matchLabels:

      run: backedn

  policyTypes:

    

  - Ingress

  ingress:

    - from:

        
        - podSelector:

            matchLabels:

              run: frontend
 ####apply the policy
 kubectl apply -f backend.yml
