####we will login into the node
36  mkdir /mnt/data
   38  cd /mnt/data
   ls
   ####3now we are going to inform k8s that i have an storage called as persistent volume
vi pv.yml
#######add the below mentioned 
apiVersion: v1 
kind: PersistentVolume
metadata:
  name: task-pv-volume 
spec:
  capacity: 
    storage: 10Gi
  accessModes:
    - ReadWriteOnce #readWritemany #read 
  hostPath:
    path: /mnt/data
 #apply the pv 
 kubectl apply -f pv.yml
 #######verify the same
 kubectl get pv
 ####create the persistent volume
vi pvc.yml
#####################
apiVersion: v1 
kind: PersistentVolumeClaim
metadata:
  name: task-pv-claim 
spec:
  resources:
    requests:
      storage: 10Gi 
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  #####pvc
  kubectl apply -f pvc.yml
  ######
  kubectl get pvc
  
  #####lets create a secret for db
  ###if you want to store some secret using base64 encode 
  vi secret.yml
#########
apiVersion: v1 
kind: Secret 
metadata:
  name: mysql-db-password 
type: opaque
data:
  db-password: ZGJwYXNzd29yZDEx
####to verify secret
kubectl apply -f secret.yml
kubectl get secret
kubectl describe secret mysql-db-password 
#####lets create the configmap
vi config.yml
########add the code
apiVersion: v1 
kind: ConfigMap
metadata:
  name: usermgmt-config 
data:
  mysql_usermgmt.sql: |-
   DROP DATABASE IF EXISTS webappdb;
   CREATE DATABASE webappdb;
####### apply the file
kubetl apply -f config.yml
447  kubectl get configmap
  448  kubectl describe configmap usermgmt-config
####lets create the db
vi mysql.yml
#######put the content
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-deployment
  labels:
    app: mysql 
####invoke deployment api and create a deployment with the nAME nginx-deployment
#deployment required specification
spec:
  replicas: 1 #usaing replica it should create three pod
  selector: #label is required all the three pod will have same label
    matchLabels:
      app: mysql 
  template: #inside your pod how the container image will be deployed
    metadata:
      labels:
        app: mysql 
    spec:
      containers:
      - name: mysql 
        image: mysql:5.6
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-db-password
                key: db-password
        ports:
        - containerPort: 3306
        ###now we want to attach the storage 
        volumeMounts:
          - name: mysql-storage
            mountPath: /var/lib/mysql 
          - name: user-config 
            mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: mysql-storage
          persistentVolumeClaim:
            claimName: task-pv-claim
        - name: user-config
          configMap:
            name: usermgmt-config
  ######apply it
  kubectl apply -f mysql.yml
  ########test it
  456  kubectl get deploy
  457  kubectl describe deploy mysql-deployment
  458  kubectl get deploy
  459  kubectl exec -it mysql-deployment -- /bin/bash
  460  kubectl get pod
  461  kubectl exec -it mysql-deployment-5c8bdfbb67-q4jwz -- /bin/bash
  ######once login to the database
  mysql -u root -p
  #####enter password as dbpassword11
  show databases;
  ######you can see your webappdb
  exit
  exit
